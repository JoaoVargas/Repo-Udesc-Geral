-----------------------------------------------------------------------------
Info file generated by Happy Version 2.0.2 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Expr                                (0)
	Expr -> Expr '+' Term                              (1)
	Expr -> Expr '-' Term                              (2)
	Expr -> Term                                       (3)
	Term -> Term '*' Factor                            (4)
	Term -> Term '/' Factor                            (5)
	Term -> Factor                                     (6)
	Factor -> Num                                      (7)
	Factor -> '(' Expr ')'                             (8)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { ADD }
	'-'            { SUB }
	'*'            { MUL }
	'/'            { DIV }
	'('            { LPAR }
	')'            { RPAR }
	Num            { NUM $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Expr            rules 1, 2, 3
	Term            rules 4, 5, 6
	Factor          rules 7, 8

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_calc -> . Expr                               (rule 0)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Expr           goto state 7
	Term           goto state 3
	Factor         goto state 4

State 1

	Expr -> . Expr '+' Term                             (rule 1)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Expr           goto state 2
	Term           goto state 3
	Factor         goto state 4

State 2

	Expr -> Expr . '+' Term                             (rule 1)
	Expr -> Expr . '-' Term                             (rule 2)

	'+'            shift, and enter state 8
	'-'            shift, and enter state 9


State 3

	Expr -> Term .                                      (rule 3)
	Term -> Term . '*' Factor                           (rule 4)
	Term -> Term . '/' Factor                           (rule 5)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 4

	Term -> Factor .                                    (rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 5

	Factor -> '(' . Expr ')'                            (rule 8)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Expr           goto state 10
	Term           goto state 3
	Factor         goto state 4

State 6

	Factor -> Num .                                     (rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	')'            reduce using rule 7
	%eof           reduce using rule 7


State 7

	%start_calc -> Expr .                               (rule 0)
	Expr -> Expr . '+' Term                             (rule 1)
	Expr -> Expr . '-' Term                             (rule 2)

	'+'            shift, and enter state 8
	'-'            shift, and enter state 9
	%eof           accept


State 8

	Expr -> Expr '+' . Term                             (rule 1)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Term           goto state 17
	Factor         goto state 4

State 9

	Expr -> Expr '-' . Term                             (rule 2)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Term           goto state 16
	Factor         goto state 4

State 10

	Expr -> Expr . '+' Term                             (rule 1)
	Expr -> Expr . '-' Term                             (rule 2)
	Factor -> '(' Expr . ')'                            (rule 8)

	'+'            shift, and enter state 8
	'-'            shift, and enter state 9
	')'            shift, and enter state 15


State 11

	Term -> Term '*' . Factor                           (rule 4)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Factor         goto state 14

State 12

	Term -> Term '/' . Factor                           (rule 5)

	'('            shift, and enter state 5
	Num            shift, and enter state 6

	Factor         goto state 13

State 13

	Term -> Term '/' Factor .                           (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 14

	Term -> Term '*' Factor .                           (rule 4)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 15

	Factor -> '(' Expr ')' .                            (rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	')'            reduce using rule 8
	%eof           reduce using rule 8


State 16

	Expr -> Expr '-' Term .                             (rule 2)
	Term -> Term . '*' Factor                           (rule 4)
	Term -> Term . '/' Factor                           (rule 5)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 17

	Expr -> Expr '+' Term .                             (rule 1)
	Term -> Term . '*' Factor                           (rule 4)
	Term -> Term . '/' Factor                           (rule 5)

	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            shift, and enter state 11
	'/'            shift, and enter state 12
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 9
Number of terminals: 7
Number of non-terminals: 4
Number of states: 18
